# Brazilian Portuguese

global.title: "Estruturação de Layout com CSS"
global.short_title: "CSS"
global.home: "Início"
global.toc: "Sumário"
global.next: "Próximo"
global.previous: "Anterior"
global.feedback: "Issues / Feedback"

util.extra_credit: "bônus"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Início"
util.nav.2: "Taco Menu"
util.nav.3: "Rascunhos"
util.nav.4: "Horas"
util.nav.5: "Direções"
util.nav.6: "Contato"

index.1: "O objetivo deste site é ensinar técnicas para estruturação de layouts utilizando CSS."
index.2: "Suponho que você saiba o que são seletores, propriedades e valores de um documento CSS. E também que você conheça uma coisa ou outra referente a estruturação de layout em um documento HTML. Mas caso todo este assunto ainda seja complicado para você, recomendamos que você inicie seus estudos com HTML e CSS <a href=\"http://learn.shayhowe.com/html-css/\">neste tutorial</a>, ou se este não for o seu caso, continue lendo e fique mais tranquilo com a qualidade da estrutura dos seus projetos daqui para frente."
index.translator: "Traduzido por  <a href=\"http://www.betomuniz.com\">Beto Muniz</a> e <a href=\"http://www.thiagoq.com\">Thiago Quintino</a>"
index.get_started: "Começar Tutorial"

no_layout.title: "Sem estrutura"
no_layout.1: "Construir um site sem estrutura é aceitável dependendo do ponto de vista do seu projeto. Porém, é preciso ficar atento, pois quando o usuário se depara com uma coluna gigante de conteúdo e sem nenhuma definição de diagramação, ele provavelmente irá desconsiderar tal o conteúdo como um todo, pois espera encontrar uma leitura bastante cansativa e demorada. Redimensione a janela do seu navegador e tente entender o que quero dizer!"
no_layout.2: "...antes de corrigirmos este problema, precisaremos entender o comportamento da propriedade <code>display</code> nos elementos HTML. Ela também será muito importante para seguirmos com este tutorial :) ."

display.title: "a propriedade \"display\""
display.intro: "<code>display</code> está entre as propriedades CSS mais importantes, pois ela controla a maneira de exibição de todos os elementos HTML. E por sua vez, cada elemento tem um padrão de valor da propriedade <code>display</code> determinado pelo seu tipo. O caso mais encontrado de valores são <code>block</code> e <code>inline</code>. Um elemento <code>display:block</code> é chamado de Elemento de Nível de Bloco ou \"block-level\". E um elemento <code>display:inline</code> é apenas chamado de \"elemento inline\""
display.block.title: "block"
display.block: "<code>div</code> é o exemplo block-level mais comum de se encontrar. O comportamento deste tipo de elemento é sempre começar uma nova linha e se expandir a medida que é adicionado conteúdo em seu interior para esquerda e direita o tanto quanto ele puder na tela. Outros elementos block-level importantes são <code>p</code> e <code>form</code>, e agora, em HTML5 temos: <code>header</code>, <code>footer</code>, <code>section</code>, e muitos outros."
display.inline.title: "inline"
display.inline.1: "<code>span</code> é o exemplo mais comum encontrado de elemento inline. O comportamento deste tipo de elemento é continuar na mesma linha em que foi declarado no documento HTML, sem interromper o fluxo da estrutura do layout em HTML. Note que neste"
display.inline.2: "exemplo"
display.inline.3: "o fluxo do parágrafo não é interrompido. Outro exemplo comum é o elemento <code>a</code>, mas somente quando utilizado para linkar um determinado conteúdo de um texto."
display.none.title: "none"
display.none.1: "Outro valor bastante utilizado da propriedade <code>display</code> é o <code>none</code>. Alguns elementos especiais como <code>script</code> utilizam este valor por padrão, mas outra utilização comum do valor <code>none</code>, fica na manipulação do estado dos elementos com Javascript, que utiliza <code>display:none</code> para ocultação de objetos sem precisar criá-los e removê-los constantemente no DOM."
display.none.2: "<code>display:none</code> é bastante diferente da utilização da propriedade <code>visibility</code>. Quando se utiliza <code>display:none</code>  você limpa o fluxo de onde o elemento estava, comportamento que não acontece com <code>visibility:hidden</code>, que por sua vez, deixa um espaço \"vazio\" onde se encontrava o objeto."
display.other.title: "outros valores da propriedade display"
display.other: "Existem inúmeros e incomuns valores da propriedade display, como: <code>list-item</code> e <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Veja aqui a listagem de todos</a>. Iremos ainda discutir sobre <code>inline-block</code> e <code>flex</code> em passos a seguir."
display.extra: "Como mencionei, cada elemento HTML possui seu valor de display por padrão. No entanto, você poderá <em>sempre</em> que desejar substituí-los! Embora não faça sentido uma <code>div</code> no modo inline, esta técnica é recomendada para aplicar semânticas particulares a determinados estados dos elementos. Um exemplo comum é aplicar <code>display:inline</code> no elemento <code>li</code> para montar um menu horizontal."

margin_auto.title: "margin: auto;"
margin_auto.1: "Definindo a <code>largura</code> de um elemento block-level, definimos regras aos limites que este elemento irá se estender para esquerda ou direita com a injeção de conteúdo no seu interior. E assim, colocando ambas as margins left e right com o valor <code>auto</code> você automaticamente centraliza horizontalmente seu elemento, pois o elemento vai ocupar a largura previamente definida por sua nova regra de exibição e distribuirá igualmente as margins left e right no restante de espaço disponível."
margin_auto.2: "O problema desta técnica se apresenta quando a janela do navegador é menor que a largura definida ao elemento, pois o navegador irá criar uma barra de rolagem horizontal para exibir toda a sua página e isso, não é visualmente e usualmente prático para navegação. Então...vamos melhorar isso..."

max_width.title: "max-width"
max_width.1: "Utilizando-se a propriedade <code>max-width</code> no lugar de <code>width</code> na situação que foi dada anteriormente, você irá ajudar o navegador que possui uma janela menor a aplicar uma regra de estilo mais \" flexível \" para ele ao seu elemento. Isso é muito importante de se fazer, quando pensamos em desenvolver páginas acessíveis por dispositivos móveis. Redimensione esta página e confira o que acontece!"
max_width.2: "A propósito, a propriedade <code>max-width</code> é <a href=\"http://caniuse.com/#search=max-width\">suportada pela maioria dos navegadores</a> incluindo IE7+, ou seja, não tenha medo de aplicá-la :) ."

box_model.title: "box model"
box_model.intro: "Já que estamos falando da largura dos elementos, devemos falar sobre uma grande limitação que a propriedade \"width\" apresenta: o <em>box model</em>. Quando você defini a largura de um elemento, este elemento pode se apresentar maior do que sua definição para o mesmo, e isto se explica facilmente, pois quando o elemento possui as propriedades <code>border</code> e <code>padding</code> os valores destas respecitivas propriedades se adicionam a largura do elemento. Veja o seguinte exemplo que demonstra elementos com os mesmos valores <code>width</code>, porém com exibições de saída diferente."
box_model.simple: "Sou pequeno..."
box_model.fancy: "E eu sou grande!"
box_model.outro: "Por muito tempo a solução disso foi a matemática. Os desenvolvedores, quando se deparavam com isso, subtraiam os valores de padding e border com a largura desejada, e assim se definia um valor final para a largura \"width\" do elemento. Felizmente, esse \"macete\" está com seus dias contados..."

box_sizing.title: "box-sizing"
box_sizing.1: "Com o tempo, os desenvolvedores perceberam que utilizar a matemática para resolver este problema, saia um pouco da essencência \"divertida\" e simples que o CSS propõe, então uma propriedade chamada <code>box-sizing</code> foi criada. Quando você defini o <code>box-sizing: border-box;</code> de um elemento, o <code>padding</code> e o <code>border</code> não se adicionam na largura do elemento em questão. Aqui está o mesmo exemplo da página anterior, porém com a propriedade <code>box-sizing: border-box;</code> aplicada:"
box_sizing.simple: "Temos o mesmo tamanho agora!"
box_sizing.fancy: "Legaaal!"
box_sizing.2: "Já que esta aplicação é muito melhor, alguns desenvolvedores desejando que todos os elementos de suas páginas funcionem assim, aplicam a seguinte técnica:"
box_sizing.3: "Isso assegura que todos os elementos serão dimensionados desta maneira mais intuitiva."
box_sizing.4: "Uma vez que a propriedade <code>box-sizing</code> é muito nova, é recomendado utilizar os vendor-prefixies <code>-webkit-</code> e <code>-moz-</code> por enquanto, iguais aos que foram demonstrados nos exemplos. E tenha em mente que ela só funcionará nos navegadores mais atuais e nos <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Com a finalidade de desenvolvermos estruturas para layouts mais complexas, precisamos discutir também sobre a propriedade <code>position</code>. Está propriedade possui diversos valores e vamos ver um por um neste tutorial, logo será impossível relembrar de todos as suas definições, sendo assim, é recomendado marcar esta página para futuras consultas."
position.static.title: "static"
position.static.1: "o valor <code>static</code> é o valor padrão de todos os elementos HTML. Um elemento com <code>position: static;</code> não se posiciona de maneira especial, seria o mesmo que dizer que o elemento <em>não</em> tem posição definida ou então que este elemento pode ter <em>qualquer</em> posição."
position.relative.title: "relative"
position.relative.1: "o valor <code>relative</code> se comporta igualmente ao valor <code>static</code>, a menos que se adicione propriedades extras no estilo do elemento."
position.relative.2: "Definindo as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, e/ou <code>left</code> em um elemento <em>position:relative</em>, iremos ajustar a posição do mesmo com referência na posição normal dele, com a diferença de que outros elementos não irão tomar sua posição original deixada vazia."
position.fixed.title: "fixed"
position.fixed.1: "Um elemento que utiliza o valor fixed, se posicionará em relação ao viewport de exibição, ou seja, ele irá permanecer sempre no mesmo lugar, mesmo que se \"movimente\" a página com as barras de rolagem. Como quando se utiliza o valor <code>relative</code>, as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> também são utilizadas para definir o fluxo de um elemento <code>position:fixed</code>."
position.fixed.2: "Tenho certeza que você notou um elemento fixo no canto direito da tela, estou te dando a permissão de observá-lo agora, e aqui está o CSS aplicado a ele:"
position.fixed.3: "Um elemento fixo não deixa espaço vazio onde ele foi declarado no HTML e nem quebra o fluxo do documento."
position.fixed.4: "Browsers de dispositivos móveis são bastante instavéis ao lidar com o valor <code>fixed</code> da propriedade <code>position</code>. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Saiba mais sobre o assunto aqui</a>."
position.fixed.example: "Oi! Não se importe comigo ainda."
position.absolute.title: "absolute"
position.absolute.1: "O valor <code>absolute</code> é o mais complicado. Este valor se comporta como o <code>fixed</code>, porém tendo como referência a <em>posição do elemento mais próximo</em> ao invés do viewport. Se um elemento <em>position:absolute</em> não possuir elementos ancestrais posicionados, ele utilizará o <code>body</code> de referência."
position.absolute.2: "Veja um exemplo simples:"
position.absolute.relative: "Este elemento está com <code>position:relative</code>. Se este elemento tivesse com <code>position: static;</code>, seu elemento filho escaparia e se posicionaria em relação ao elemento <code>body</code> do documento"
position.absolute.absolute: "Este elemento é <code>position:absolute</code>. E é posicionado em relação ao seu elemento pai." 
position.absolute.3: "Este é um assunto complicado, mas é essencial para estruturação de layouts em HTML com CSS. Na próxima página, vamos utilizar a propriedade <code> position </ code> em um exemplo mais prático."
position_example.title: "exemplo: position"
position_example.1: "A propriedade position irá fazer um pouco mais de sentido neste exemplo prático de uma página web."
position_example.section.1: "A propriedade <code>margin-left</code> do elemento <code>section</code> garante que não a espaço preenchido pelo elemento <code>nav</code>."
position_example.section.2: "Observe o que acontece quando você redimensionar seu navegador. Ele funciona muito bem!"
position_example.2: "Este exemplo funciona porque o container é maior que o nav. Se não fosse, o nav vazaria do bloco que o envolve. Nas próximas páginas vamos discutir outras técnicas para estruturação HTML e que também possuem diferentes prós e contras."
position_example.footer: "Se você utilizar um cabeçalho ou um rodapé fixo, verifique se nada ficará oculto! Eu coloquei um <code> margin-bottom </ code> no elemento <code>body </ code> para isso."

float.title: "float"
float.1: "Outra propriedade utilizada para estruturação HTML é a propriedade <code>float</code>. A principal função da mesma é a quebra automática de um texto que envolve um elemento, como o exemplo abaixo:"

clear.title: "clear"
clear.floating: "Estou flutuando!"
clear.1: "A propriedade <code>clear</code> é importante para controlar o comportamento de elementos com a propriedade <code>float</code>. Confira estes dois exemplos:"
clear.2: "Neste caso, o elemento <code>section</code> está declarado depois do elemento <code>div</code> no fluxo do documento HTML. No entanto, o elemento <code>div</code> está definido como <code>float:left</code>, e o que acontece é: o texto dentro do elemento <code>section</code> envolve o elemento <code>div</code> e no fim o elemento <code>section</code> envolve tudo. Mas e se quiséssemos o elemento <code>section</code> depois do elemento <code>div</code>?"
clear.3: "Utilizando a propriedade <code>clear</code> podemos facilmente mover o elemento <code>div</code> para baixo do elemento com <code>float:left</code> aplicado. A propriedade <code>clear</code> possui os respecitivos valores: <code>left</code>,<code>right</code> e <code>both</code>."

clearfix.title: "clearfix hack"
clearfix.1: "Coisas ruins que podem acontecer quando se utiliza <code>float</code>:"
clearfix.2: "Oooops... esta imagem é maior do que o elemento que a contém, e isso explica o motivo que ela estoura os limites dele!"
clearfix.3: "Maaas... Existe uma maneira de corrigirmos isto, com mais um \"macete\", chamado de <em>clearfix hack</em>."
clearfix.4: "Vamos tentar adicionar esse novo CSS:"
clearfix.5: "Agora vamos ver o que acontece:"
clearfix.6: "Ótimooo!"
clearfix.7: "Isso funciona para navegadores modernos. Se você precisa dar suporte ao IE6, adicione o seguinte:"
clearfix.8: "Existem outros navegadores que exigem uma atenção extra para utilização desta técnica <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">O mundo do \"clearfixing\" é bastante assustador</a>, mas esta solução simples irá trabalhar para a grande maioria dos navegadores atuais."

float_layout.title: "exemplo: float"
float_layout.1: "É muito comum construir estruturas inteiras de uma página utilizando apenas a propriedade <code>float</code>. Aqui veremos a mesma estrutura utilizada no exemplo anterior da propriedade <code>position</code>, mas com a propriedade <code>float</code> sendo utilizada para posicionar os blocos."
float_layout.2: "Este exemplo se comporta exatamente como o anterior. Observe que aplicamos a técnica de <code>clearfix</code> no container."

percent.title: "width com porcentagem"
percent.1: "A unidade de porcentagem no CSS é relativa ao bloco que contém e ao objeto que utiliza esta unidade. É ótimo para definirmos dimensões escaláveis em imagens: aqui mostramos uma imagem que sempre terá 50% da largura de seu container. Redimensione a janela do seu navegador para ver o que acontece!"
percent.2: "Também poderiamos ter aplicado as propriedades <code>min-width</code> e <code>max-width</code> para limiter o máximo e o mínimo de largura que a imagem poderia se expandir."
percent.layout.title: "estruturando uma página com porcentagem"
percent.layout.1: "Você pode utilizar porcentagem para estruturar uma página, mas isso exigirá bastante trabalho e cálculo. No exemplo abaixo, o elemento <code>nav</code> começa a se deformar a medida que a tela fica menor."
percent.layout.2: "Quando a viewport é muito estreita, o elemento <code>nav</code> fica esmagado. E nem poderiamos utilizar <code>min-width</code> para corrigirmos isso, pois a coluna direita não iria respeitar a regra."

media_queries.title: "media queries"
media_queries.1: "\"Design Responsivo\" é uma técnica que faz com que sua página \"responda\" para os navegadores de diferentes dispositivos como eles deverão exibir seu conteúdo..."
media_queries.2: "Media Queries vem como a maneira mais poderosa de se aplicar isso. E para confirmar esta afirmação, vamos dar larguras definidas para nossa estrutura que utiliza porcentagem e ter em uma coluna todo nosso conteúdo quando a tela do nosso navegador for muito pequena:"
media_queries.3: "Agora, quando você redimensionar seu navegador, veja o que acontece, é muito legal!"
media_queries.4: "Ba Dum Tss! Agora nosso layout está sexy para ser exibido em dispositivos móveis. Aqui estão <a href=\"http://mediaqueri.es/\">alguns sites que utilizam media queries</a>. Aliás, media queries oferecem muito mais do que apenas detectar <code>min-width</code> e <code>max-width</code>: saiba mais na <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">MDN documentation da mozilla</a>."
media_queries.5: "Você pode melhorar ainda mais a visualização de sua página em dispositivos móveis utilizando a <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta tag: viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Antigamente, para criar uma grid de blocos alinhadas horizontalmente, só era possível quando utilizávamos a propriedade <code>float</code>, mas agora com o valor <code>inline-block</code> da propriedade <code>display</code>, é bem mais fácil solucionar este problema. Vejamos exemplos de ambas as abordagens."
inline_block.hard_way.title: "O caminho difícil (aplicando float)"
inline_block.hard_way.box: "Estou flutuando!"
inline_block.hard_way.after: "Estou utilizando a propriedade <code>clear</code>, e não deixarei este bloco flutuar."
inline_block.easy_way.title: "O caminho fácil (aplicando inline-block)"
inline_block.easy_way.info: "É possível obter o mesmo efeito utilizando o valor <code>inline-block</code> da propriedade <code>display</code>."
inline_block.easy_way.box: "Eu sou um inline-block!"
inline_block.easy_way.after: "E eu não preciso utilizar <code>clear</code> neste caso. Show de bola!"
inline_block.2: "Mas para utilizar <code>display:inline-block</code> você precisará de um pouco mais de trabalho para dar suporte aos navegadores IE6 e IE7, <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">confira aqui como fazer isso</a>."

inline_block_layout.title: "exemplo: inline-block"
inline_block_layout.1: "Você também pode usar <code>inline-block</code> para estruturar páginas. Mas existem algumas coisas para se saber:"
inline_block_layout.caveat.1: "Elementos <code>inline-block</code> são afetados pela propriedade <code>vertical-align</code>, caso você queira colocar juntamente com o valor <code>top</code>;"
inline_block_layout.caveat.2: "você precisa definir a largura de cada coluna;"
inline_block_layout.caveat.3: "Haverá espacamento entre os elementos caso haja um espaço no documento HTML."
inline_block_layout.tada: "Ba Dum Tss!"

column.title: "column"
column.1: "Aqui temos um novo grupo de propriedades CSS que permite facilmente fazer várias colunas de texto. Dê uma olhada:"
column.2: "CSS columns é um grupo de propriedades muito novo, logo você precisará utilizar vendor-prefixies, e também ficar atento de que não funcionará nos navegadores <a href=\"http://caniuse.com/#search=column\">IE9 e Opera Mini</a>. Não iremos abordar profundamente este grupo de propriedades, mas <a href=\"http://www.quirksmode.org/css/multicolumn.html\">clique aqui</a> para saber mais sobre ele."

flexbox.title: "flexbox"
flexbox.1: "Uma nova maneira de estruturação de layouts em HTML será utilizando a técnica Flexbox. Esta técnica está prestes a redefinir a forma de utilizarmos CSS para estilizarmos a estrutura de nosso HTML. Infelizmente a especificação mudou muito recentemente, e por isso ainda é implementada de forma diferente, nos diferentes navegadores existentes. Mas ainda assim, gostaria de compartilhar alguns exemplos para que você saiba o que está chegando por aí. <em>Estes exemplos atualmente só funcionarão na implementação do Google Chrome</em>, com base na última versão da <a href=\"http://www.w3.org/TR/css3-flexbox/\">especifícação</a>."
flexbox.2: "Há uma série de recursos envolvendo a implementação flexbox. Se você quiser saber mais sobre Flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">comece aqui</a> e também não deixe de conferir este <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">artigo detalhado com a última versão de sintaxe</a>."
flexbox.3: "Podemos fazer muita coisa com Flexbox, veja abaixo alguns exemplos:"
flexbox.simple.title: "Estruturação simples utilizando Flexbox"
flexbox.simple.1: "Flexbox é muito fácil!"
flexbox.fancy.title: "Estruturação Sexy utilizando Flexbox"
flexbox.fancy.1: "Terei sempre 200px de largura se houver espaço, mas diminuirei para 100px de largura caso precisem de espaço, mas não menor que isso, é o meu limite!"
flexbox.fancy.2: "Terei sempre 200px de largura, nada me afetará."
flexbox.fancy.3: "Vou ocupar 1/3 da largura restante."
flexbox.fancy.4: "Vou ocupar 2/3 da largura restante."
flexbox.centering.title: "Centralizando com Flexbox"
flexbox.centering.1: "Finalmente, ficou muito simples e sem \"truques\" centralizar um elemento verticalmente com CSS!"

frameworks.title: "frameworks css"
frameworks.1: "Estruturação de Layouts em HTML utilizando CSS é bem mais complicado do que aparenta, e para isso alguns frameworks CSS surgiram para facilitar certas coisas em nossa vida de desenvolvimento. Abaixo segue uma lista de frameworks para você conferir. Mas tenha em mente de que para utilizar um framework CSS você precisará saber o que seu realmente precisa, e de que eles não subistituem a idéia de aprender como é o funcionamento do CSS."
frameworks.2: "É isso! Se você tiver qualquer comentário sobre este site, por favor <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">me avise no Twitter</a>!"


about.title: "sobre"
about.credits: "Escrito e construído por <a href=\"http://incompl.com\">Greg Smith</a>. Design de <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Nós trabalhamos em <a href=\"http://bocoup.com\">Bocoup</a>."